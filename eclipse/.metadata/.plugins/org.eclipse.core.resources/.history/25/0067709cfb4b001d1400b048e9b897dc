package fr.skhr.loyto.SKHRTab.common;

import java.awt.Color;
import java.util.List;

import org.lwjgl.opengl.GL11;

import cpw.mods.fml.common.Mod;
import cpw.mods.fml.common.Mod.EventHandler;
import cpw.mods.fml.common.Mod.Instance;
import cpw.mods.fml.common.SidedProxy;
import cpw.mods.fml.common.event.FMLInitializationEvent;
import cpw.mods.fml.common.event.FMLPostInitializationEvent;
import cpw.mods.fml.common.event.FMLPreInitializationEvent;
import cpw.mods.fml.common.eventhandler.EventPriority;
import cpw.mods.fml.common.eventhandler.SubscribeEvent;
import fr.skhr.loyto.SKHRTab.proxy.CommonProxy;
import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.Gui;
import net.minecraft.client.gui.GuiIngame;
import net.minecraft.client.gui.GuiPlayerInfo;
import net.minecraft.client.network.NetHandlerPlayClient;
import net.minecraftforge.client.event.RenderGameOverlayEvent;
import net.minecraftforge.common.MinecraftForge;
import net.minecraftforge.common.config.Configuration;

@Mod(modid = "SKHRTab", name = "Tab serveur", version = "1.0.0")
public class SKHRTab {
	public static final String MODID = "SKHRTab";
	
	@SidedProxy(clientSide = "fr.skhr.loyto.SKHRTab.proxy.ClientProxy", serverSide = "fr.skhr.loyto.SKHRTab.proxy.CommonProxy")
	public static CommonProxy proxy;
	
	@Instance("modtutoriel")
    public static SKHRTab instance;

	@EventHandler
    public void preInit(FMLPreInitializationEvent event)
    {
		//Configuration
		Configuration cfg = new Configuration(event.getSuggestedConfigurationFile());
		try
		{
		    cfg.load();
		}
		catch(Exception ex)
		{
		    event.getModLog().severe("Failed to load configuration");
		}
		finally
		{
		    if(cfg.hasChanged())
		    {
		        cfg.save();
		    }
		}
    }
    	
    @EventHandler
    public void init(FMLInitializationEvent event)
    {
    	proxy.registerRender();
    	MinecraftForge.EVENT_BUS.register(this);
    }
    	
    @EventHandler
    public void postInit(FMLPostInitializationEvent event)
    {
    	
    }
    
    @SuppressWarnings("null")
	@SubscribeEvent(priority = EventPriority.HIGH)
    public void eventHandler(RenderGameOverlayEvent.Pre event) {
    	//Event affichage du playerList (tab)
    	if (event.type == RenderGameOverlayEvent.ElementType.PLAYER_LIST) {
    		//On annule l'affichage du tab
    		event.setCanceled(true);
    		
    		//Création du nouveau tab
    		final Minecraft mc = Minecraft.getMinecraft();
    		
    		NetHandlerPlayClient handler = mc.thePlayer.sendQueue;
    		List<GuiPlayerInfo> players = handler.playerInfoList;
    		int maxPlayers = handler.currentServerMaxPlayers;
    		
    		/* Ping de tout les joueurs
    		for (int i = 0; i < players.size(); i++) {
    			GuiPlayerInfo player = players.get(i);
    			int ping = player.responseTime;
                String str = ping + "ms";
                
                System.out.println(str);
    		}
			*/
    		/*
    		int width = event.resolution.getScaledWidth();
    		int height = event.resolution.getScaledHeight();
    		
    		int playersInColumn = 10;
    		int columnWidth = 137;
    		int columnHeight = 11;
    		*/
    		/*
    		GuiIngame.drawRect(0, 0, columnWidth, columnHeight, Color.GRAY.getRGB());

    		GuiIngame.drawRect(0, 0, columnWidth, 1, Color.BLACK.getRGB());
    		GuiIngame.drawRect(0, columnHeight, columnWidth, columnHeight-1, Color.BLACK.getRGB());
    		GuiIngame.drawRect(0, 0, 1, columnHeight, Color.BLACK.getRGB());
    		GuiIngame.drawRect(columnWidth, 0, columnWidth-1, columnHeight, Color.BLACK.getRGB());
    		
    		String pseudo = "Loyto";
    		String ping = "999 ms";

    		mc.fontRenderer.drawString(pseudo, 2, 2, Color.BLACK.getRGB());
    		mc.fontRenderer.drawString(ping, columnWidth-35, 2, Color.BLACK.getRGB());
    		*/
    		
    		int width = event.resolution.getScaledWidth();
    		int height = event.resolution.getScaledHeight();
    		
    		int columnWidth = 140;
    		int slotHeight = 11;
    		
    		//fond
    		//-calcule
    		//--Nombre de slot
    		int slots = 20;
    		if(players.size() < 20) { slots = players.size(); }
    		else if(players.size() > 80) { slots = 25; }
    		//slots = 25;
    		
    		//--Nombre de colonne
    		int columns = players.size() / slots; 
    		if(players.size()%slots > 0) { columns++; }
    		
    		if(columns == 1) { columnWidth = (int) (columnWidth*1.5); }
    		int fondWidth = columns * (columnWidth+1) + 1;
    		
    		//--Taille des colonnes en fonction de la taille de l'écran
    		while(fondWidth > width & columnWidth > 90){
    			columnWidth -= 10;
    			fondWidth = columns * (columnWidth+1)+1;
    		}
    		
    		int fondHeight = 30 + (slotHeight+1) * slots + 1;
    		
    		//-rendu
    		GL11.glEnable(GL11.GL_BLEND);
    		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
    		GL11.glEnable(3042);
    		
    		int start = width/2 - fondWidth/2;
    		GuiIngame.drawRect(start, 2, start + fondWidth, fondHeight+2, -2147483648);
    		
    		//Header
    		String header = "Voici le Header";
    		int headerWidth = mc.fontRenderer.getStringWidth(header);
    		mc.fontRenderer.drawString(header, width/2 - headerWidth/2, 6, Color.WHITE.getRGB());
    		
    		//Footer
    		String footer = "Voici le Footer";
    		int footerWidth = mc.fontRenderer.getStringWidth(footer);
    		mc.fontRenderer.drawString(footer, width/2 - footerWidth/2, fondHeight-15+6, Color.WHITE.getRGB());
    		
    		//slot
    		int startSlotX = start;
    		int startSlotY = 17;
    		
    		int x;
    		int y;
    		
    		int p = 0;
    		
    		for(int i = 0; i < columns ; i++) {
    			for(int k = 0; k < slots ; k++) {
    				x = startSlotX + i * (columnWidth+1) + 1;
    				y = startSlotY + k * (slotHeight+1) + 1;
    				
    				GuiIngame.drawRect(x, y, x + columnWidth, y + slotHeight, (new Color(158, 152, 152, 100)).getRGB());
    				mc.fontRenderer.drawString(players.get(p).name, x + 2 , y + 2, Color.WHITE.getRGB());
    				
    				GuiPlayerInfo player = players.get(p);
        			int ms = player.responseTime;
    				
    				int ping = 4;
    				if(ms < 0) {
    					ping = 5;
    				}
    				else if(ms < 150) {
    					ping = 0;
    				}
    				else if(ms < 300) {
    					ping = 1;
    				}
    				else if(ms < 600) {
    					ping = 2;
    				}
    				else if(ms < 1000) {
    					ping = 3;
    				}
    				
    	    		mc.getTextureManager().bindTexture(Gui.icons);
    	    		GuiIngame ingameGui = new GuiIngame(mc);
    	    		ingameGui.drawTexturedModalRect(x + columnWidth - 11, y + slotHeight/4, 0, 176 + ping * 8, 10, 8);
    				
    				p++;
    			}
    		}
    		
    		/*
    		int tabWidth = columnWidth*columns;
    		
    		int start = width/2 - tabWidth/2;
    		
    		//-font
    		GuiIngame.drawRect(start, 2, start + tabWidth, 15, Color.GRAY.getRGB());
    		*/
    		//-cadre
    		
    		//Case
    	}
    }
}
